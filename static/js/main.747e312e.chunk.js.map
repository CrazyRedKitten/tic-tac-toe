{"version":3,"sources":["context/GameContext.ts","Components/Circle.tsx","Components/Cross.tsx","Components/GridItem.tsx","Components/PlayerColors.tsx","Components/Game.tsx","context/GameReducer.ts","context/Types.ts","context/GameState.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameContext","createContext","Circle","color","width","height","viewBox","style","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","d","fill","Cross","GridItem","rowNumber","gridItemState","useContext","changeGridItemState","isGameOver","playerTurn","playerColorScheme","colorSchemeHandler","firstColor","playerOneColor","secondColor","playerTwoColor","console","log","border","display","alignItems","justifyContent","onClick","String","PlayerColors","colorSchemeNumber","changeColorScheme","boxSizing","borderRadius","marginRight","marginLeft","borderTopLeftRadius","borderBottomLeftRadius","backgroundColor","borderTopRightRadius","borderBottomRightRadius","Game","field_1","field_2","field_3","field_4","field_5","field_6","field_7","field_8","field_9","restartGame","turnCount","win","winner","className","margin","verticalAlign","gameResultWrapper","ResultAnnouncer","padding","boxShadow","marginTop","paddingBottom","paddingTop","checkWinner","state","score","scoreArray","i","push","gameState","element","action","type","payload","gridID","gridValue","updatedState","gameMode","GameState","children","useReducer","GameReducer","dispatch","Provider","value","changeGameMode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.747e312e.chunk.js","sourcesContent":["import {createContext} from \"react\";\n\nconst GameContext = createContext('');\n\nexport default GameContext;","import React from \"react\";\n\n\ntype CircleProps = {\n    color: string,\n}\n\nconst Circle = ({color}: CircleProps) => {\n    return(\n        <div>\n            <svg width=\"75%\" height=\"75%\" viewBox=\"0 0 236 236\"\n                 style={{fillRule:'evenodd',clipRule:'evenodd',strokeLinejoin:'round',strokeMiterlimit:2}}>\n                <path d=\"M117.636,0c64.925,0 117.635,52.711 117.635,117.636c0,64.925 -52.71,117.635 -117.635,117.635c-64.925,0 -117.636,-52.71 -117.636,-117.635c0,-64.925 52.711,-117.636 117.636,-117.636Zm0,44.342c40.451,0 73.293,32.842 73.293,73.294c0,40.451 -32.842,73.293 -73.293,73.293c-40.452,0 -73.294,-32.842 -73.294,-73.293c0,-40.452 32.842,-73.294 73.294,-73.294Z\"\n                      style={{fill: color}}/>\n            </svg>\n    </div>\n    )\n}\n\nexport default Circle;","import React from \"react\";\n\n\ntype CircleProps = {\n    color: string,\n}\n\nconst Cross = ({color}: CircleProps) => {\n    return(\n        <div>\n            <svg width=\"75%\" height=\"75%\" viewBox=\"0 0 236 236\"\n                 style={{fillRule:'evenodd',clipRule:'evenodd',strokeLinejoin:'round',strokeMiterlimit:2}}>\n                <path d=\"M117.636,87.79l59.534,-61.173c4.007,-4.117 10.602,-4.207 14.718,-0.2l14.918,14.518c4.116,4.006 4.206,10.601 0.2,14.718l-60.324,61.983l60.324,61.983c4.006,4.116 3.916,10.711 -0.2,14.718l-14.918,14.518c-4.116,4.006 -10.711,3.917 -14.718,-0.2l-59.534,-61.173l-59.535,61.173c-4.006,4.117 -10.601,4.206 -14.718,0.2l-14.917,-14.518c-4.117,-4.007 -4.206,-10.602 -0.2,-14.718l60.323,-61.983l-60.323,-61.983c-4.006,-4.117 -3.917,-10.712 0.2,-14.718l14.917,-14.518c4.117,-4.007 10.712,-3.917 14.718,0.2l59.535,61.173Z\"\n                style={{fill: color}}/>\n            </svg>\n        </div>\n    )\n}\n\nexport default Cross;","import React, {useContext} from \"react\";\nimport GameContext from \"../context/GameContext\";\nimport Circle from \"./Circle\";\nimport Cross from \"./Cross\";\n\ntype GridItemProps = {\n    rowNumber: number;\n    gridItemState: boolean\n}\n\nconst GridItem = ({rowNumber, gridItemState} : GridItemProps) => {\n\n    const { changeGridItemState, isGameOver,\n        playerTurn,playerColorScheme, colorSchemeHandler }: any = useContext(GameContext)\n    const firstColor: string = colorSchemeHandler(playerColorScheme).playerOneColor;\n    const secondColor: string = colorSchemeHandler(playerColorScheme).playerTwoColor;\n\n    console.log(secondColor)\n\n    const playerSign = () => {\n        if(String(gridItemState) === 'circle') return <Circle color={firstColor}/>\n        else if(String(gridItemState) === 'cross') return <Cross color={secondColor}/>\n        else return null\n    }\n\n    // console.log(`Type filed ${rowNumber}`,typeof gridItemState)\n\n    return <div style={{\n        height:'70px',\n        width: '70px',\n        border:'2px solid #A8B3B1',\n        display:'flex',\n        alignItems:'center',\n        justifyContent: \"center\",\n    }}\n                onClick={() => {\n                    if(!isGameOver){\n                        // gridItemState is type boolean by default, however after change it will be type string\n                        // check is needed to prevent reassigning GridItem value once the value is assigned\n                        if (typeof gridItemState === \"boolean\") {\n                            changeGridItemState(rowNumber, playerTurn ? 'circle' : 'cross')\n                        }\n                    }\n\n                }}\n    >\n        {gridItemState ? playerSign() : null}\n    </div>\n}\n\nexport default GridItem;","import React, {useContext} from \"react\";\nimport GameContext from \"../context/GameContext\";\n\ntype PlayerColorsProps = {\n    playerOneColor: string;\n    playerTwoColor: string;\n    colorSchemeNumber: number,\n}\n\nconst PlayerColors = ({playerOneColor, playerTwoColor, colorSchemeNumber} : PlayerColorsProps ) => {\n    const {playerColorScheme, changeColorScheme}: any  = useContext(GameContext);\n\n    return(\n        <div onClick={() => changeColorScheme(colorSchemeNumber)}\n            style={{\n            width:'30px',\n            boxSizing:'content-box',\n            borderRadius:'4px',\n            height:'30px',\n            border: `2px solid ${(playerColorScheme === colorSchemeNumber) ? 'black' : 'transparent'}`,\n            display:'inline-block',\n            marginRight: '.25rem',\n            marginLeft: '.25rem'}}>\n            <div style={{display:'inline-block',width:'50%', height:'100%',\n                borderTopLeftRadius:'2px',\n                borderBottomLeftRadius:'2px',\n                backgroundColor:playerOneColor}}/>\n            <div style={{display:'inline-block',width:'50%', height:'100%',\n                borderTopRightRadius:'2px',\n                borderBottomRightRadius:'2px',\n                backgroundColor:playerTwoColor}}/>\n        </div>\n    )\n}\n\nexport default PlayerColors;","import React, {Fragment, useContext} from \"react\";\nimport GridItem from \"./GridItem\";\nimport GameContext from \"../context/GameContext\";\nimport PlayerColors from \"./PlayerColors\";\n\n\nconst Game = () => {\n\n    const {\n        field_1, field_2, field_3,\n        field_4, field_5, field_6,\n        field_7, field_8, field_9,\n        playerTurn, restartGame,\n        turnCount,isGameOver, win, winner,playerColorScheme,\n        colorSchemeHandler\n    }: any  = useContext(GameContext);\n\n    const ResultAnnouncer = (turnCount: number) => {\n        const gameResultWrapper = (winner: number) => {\n            if (winner === 1) return '🎉 Player One won! 🎉'\n            else if (winner === 2) return '🥳 Player Two won! 🥳'\n            else return '😐 Draw!'\n         }\n        if (turnCount === 9 || win === true) {\n            return (\n                <Fragment>\n                    <h5  className={'mb-3'} >{gameResultWrapper(winner)}</h5>\n                    <button onClick={restartGame} className={'button'}>Play again?</button>\n                </Fragment>\n            )\n        } else return null\n    }\n\n    const ColorSchemes = () => {\n        return(\n            <Fragment>\n                <h6 className={'mt-3'}>Player colors</h6>\n                <div className={'mt-1'}\n                     style={{\n                         marginTop:'1rem',\n                         boxShadow:\"#A8B3B1 5px 5px 15px, #D0DEDA -5px -5px 15px\",\n                         borderRadius:'12px', paddingBottom:'.5rem',paddingTop:'.5rem',\n                     }}>\n                    <PlayerColors playerOneColor='#FD6B15' playerTwoColor='#158DFD' colorSchemeNumber={1}/>\n                    <PlayerColors playerOneColor='#DB6570' playerTwoColor='#71db65' colorSchemeNumber={2}/>\n                    <PlayerColors playerOneColor='#9dd1e9' playerTwoColor='#e9b69d' colorSchemeNumber={3}/>\n                    <PlayerColors playerOneColor='#87cd1e' playerTwoColor='#CD1E87' colorSchemeNumber={4}/>\n                    <PlayerColors playerOneColor='#E144F9' playerTwoColor='#F9ed44' colorSchemeNumber={5}/>\n                </div>\n            </Fragment>\n        )\n    }\n\n    console.log('is game over', isGameOver)\n    return (\n        <div>\n            <h1>Tic-Tac-Toe</h1>\n            <div className={'row mb-3'}>\n                <div className={'col-md-12'}>\n                    {(!isGameOver) &&\n                    <h5 style={{margin:0}}><span\n                        style={{\n                            verticalAlign:'bottom',\n                            backgroundColor: playerTurn ? colorSchemeHandler(playerColorScheme).playerOneColor\n                                : colorSchemeHandler(playerColorScheme).playerTwoColor,\n                            color: playerTurn ? '#000' : '#FFF'\n                        }}\n                        className={'badge'}\n                    >Player {playerTurn ? '1' : '2'}</span> turn\n                    </h5>}\n                </div>\n            </div>\n            {ResultAnnouncer(turnCount)}\n            <div style={{\n                padding:'1rem',\n                borderRadius: '12px',\n                border: '1px solid rgb(198, 211, 208)',\n                boxShadow:\"#A8B3B1 5px 5px 15px, #D0DEDA -5px -5px 15px\",\n                display:'flex',\n                justifyContent: \"center\",\n                alignItems:'center',\n            }}>\n                <div>\n                    <GridItem gridItemState={field_1} rowNumber={1}/>\n                    <GridItem gridItemState={field_4} rowNumber={4}/>\n                    <GridItem gridItemState={field_7} rowNumber={7}/>\n                </div>\n                <div>\n                    <GridItem gridItemState={field_2} rowNumber={2}/>\n                    <GridItem gridItemState={field_5} rowNumber={5}/>\n                    <GridItem gridItemState={field_8} rowNumber={8}/>\n                </div>\n                <div>\n                    <GridItem gridItemState={field_3} rowNumber={3}/>\n                    <GridItem gridItemState={field_6} rowNumber={6}/>\n                    <GridItem gridItemState={field_9} rowNumber={9}/>\n                </div>\n            </div>\n            {(turnCount === 0) && ColorSchemes()}\n        </div>\n    )\n}\n\nexport default Game;","import {CHANGE_GRID_ITEM_STATE, RESTART_GAME, CHANGE_COLOR_SCHEME, CHANGE_GAME_MODE} from './Types'\n\nfunction checkWinner(state:object) {\n\n    const score =(state: any) =>{\n        let scoreArray = []\n\n        for (let i: number = 1; i < 10; i++){\n            switch (state[`field_${i}`]) {\n                case false:\n                    scoreArray.push(0)\n                    break\n                case 'circle':\n                    scoreArray.push(1)\n                    break\n                case 'cross':\n                    scoreArray.push(-1)\n            }\n        }\n        return scoreArray\n    }\n    const winCases: Array<number> = [\n        (score(state)[0] + score(state)[1] + score(state)[2]),\n        (score(state)[3] + score(state)[4] + score(state)[5]),\n        (score(state)[6] + score(state)[7] + score(state)[8]),\n        (score(state)[0] + score(state)[3] + score(state)[6]),\n        (score(state)[1] + score(state)[4] + score(state)[7]),\n        (score(state)[2] + score(state)[5] + score(state)[8]),\n        (score(state)[0] + score(state)[4] + score(state)[8]),\n        (score(state)[2] + score(state)[4] + score(state)[6])\n    ]\n    let gameState = {win: false, winner: 0};\n\n    for (let element of winCases) {\n        if (element === 3) {\n            gameState = {win: true, winner: 1}\n            break;\n        }\n        else if (element === -3){\n            gameState = {win: true, winner: 2}\n            break;\n        }\n    }\n\n    return gameState\n}\n\nexport default (state : any, action: any) => {\n    switch (action.type){\n        case CHANGE_GRID_ITEM_STATE:\n            state[`field_${action.payload.gridID}`] = action.payload.gridValue\n            const updatedState: any =  {...state, turnCount: state.turnCount + 1, playerTurn: !state.playerTurn}\n            console.log('check winner',checkWinner(updatedState))\n            updatedState.win = checkWinner(updatedState).win\n            updatedState.winner = checkWinner(updatedState).winner\n            if( state.turnCount + 1 === 9 ||  checkWinner(updatedState).win){\n                updatedState.isGameOver = true\n            }\n            return updatedState\n        case RESTART_GAME:\n            return {\n                ...state,\n                winner:0,\n                win: false,\n                turnCount: 0,\n                isGameOver: false,\n                field_1: false,\n                field_2: false,\n                field_3: false,\n                field_4: false,\n                field_5: false,\n                field_6: false,\n                field_7: false,\n                field_8: false,\n                field_9: false,\n                playerTurn: true,\n            }\n        case CHANGE_COLOR_SCHEME:\n            return {...state,\n                playerColorScheme: action.payload\n            }\n        case CHANGE_GAME_MODE:\n            return {\n                ...state,\n                gameMode: !state.gameMode\n            }\n        default:\n            return{\n                ...state\n            }\n    }\n};\n","export const CHANGE_GRID_ITEM_STATE: string = \"CHANGE_GRID_ITEM_STATE\";\nexport const RESTART_GAME: string = \"RESTART_GAME\";\nexport const CHANGE_COLOR_SCHEME: string = \"CHANGE_COLOR_SCHEME\";\nexport const CHANGE_GAME_MODE: string = \"CHANGE_GAME_MODE\";","import React, { useReducer } from \"react\";\nimport GameReducer from \"./GameReducer\";\nimport GameContext from \"./GameContext\";\n\nimport {CHANGE_GRID_ITEM_STATE, RESTART_GAME,CHANGE_COLOR_SCHEME,CHANGE_GAME_MODE} from './Types'\n\n\nconst GameState = ({children}) => {\n\n    const initialState = {\n        //each filed represent GridItem's state\n        //false - the field clear, 'cross' - cross (Player 1), 'circle' - circle (Player 2)\n        win: false,\n        // winner state 0 - draw, 1 - first player, 2 - second player\n        winner:0,\n        field_1: false,\n        field_2: false,\n        field_3: false,\n        field_4: false,\n        field_5: false,\n        field_6: false,\n        field_7: false,\n        field_8: false,\n        field_9: false,\n        turnCount:0,\n        // true for 2 players, false for 1 player\n        gameMode: true,\n        //Player turn true for first player and false for second player\n        playerTurn: true,\n        isGameOver: false,\n        playerColorScheme: 1,\n    }\n\n    const [state, dispatch] = useReducer(GameReducer, initialState);\n\n    const changeGridItemState = (gridID, gridValue) => {\n        dispatch({\n            type: CHANGE_GRID_ITEM_STATE,\n            payload: {gridID, gridValue}\n        })\n    }\n\n    const restartGame = () => {\n        dispatch({\n            type: RESTART_GAME\n        })\n    }\n\n    const changeColorScheme = (colorSchemeNumber) => {\n        dispatch({\n            type: CHANGE_COLOR_SCHEME,\n            payload: colorSchemeNumber\n        })\n    }\n\n    const changeGameMode = () => {\n        dispatch({\n            type: CHANGE_GAME_MODE,\n        })\n    }\n\n    const colorSchemeHandler = (playerColorScheme) => {\n        switch (playerColorScheme) {\n            case 1:\n            default:\n                return {playerOneColor:'#FD6B15', playerTwoColor:'#158DFD'}\n            case 2:\n                return {playerOneColor:'#DB6570', playerTwoColor:'#71DB65'}\n            case 3:\n                return {playerOneColor:'#9dd1e9', playerTwoColor:'#e9b69d'}\n            case 4:\n                return {playerOneColor:'#87cd1e', playerTwoColor:'#CD1E87'}\n            case 5:\n                return {playerOneColor:'#E144F9', playerTwoColor:'#F9ed44'}\n        }\n    }\n\n    return (\n        <GameContext.Provider\n            value={{\n                win: state.win,\n                winner:state.winner,\n                field_1: state.field_1,\n                field_2: state.field_2,\n                field_3: state.field_3,\n                field_4: state.field_4,\n                field_5: state.field_5,\n                field_6: state.field_6,\n                field_7: state.field_7,\n                field_8: state.field_8,\n                field_9: state.field_9,\n                gameMode: state.gameMode,\n                isGameOver: state.isGameOver,\n                playerTurn: state.playerTurn,\n                turnCount: state.turnCount,\n                playerColorScheme: state.playerColorScheme,\n                restartGame,\n                changeGameMode,\n                changeGridItemState,\n                changeColorScheme,\n                colorSchemeHandler,\n            }}\n        >\n            {children}\n        </GameContext.Provider>\n    );\n};\n\nexport default GameState;","import React from 'react';\nimport './App.css';\nimport Game from \"./Components/Game\";\nimport GameState from './context/GameState.jsx';\n\n\nfunction App() {\n  return (\n      <GameState>\n        <div style={{\n          backgroundColor:'#C6D3D0',\n          height: '100vh',\n          display:'flex',\n          justifyContent: \"center\",\n          alignItems:'center',\n        }} className=\"App\">\n          <Game />\n        </div>\n      </GameState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}